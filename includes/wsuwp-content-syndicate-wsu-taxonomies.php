<?php

namespace WSUWP\Content_Syndicate\WSU_Taxonomies;

add_filter( 'wsuwp_content_syndicate_default_atts', 'WSUWP\Content_Syndicate\WSU_Taxonomies\append_default_attributes' );
add_filter( 'wsuwp_content_syndicate_taxonomy_filters', 'WSUWP\Content_Syndicate\WSU_Taxonomies\build_taxonomy_filters', 10, 2 );
add_action( 'rest_query_vars', 'WSUWP\Content_Syndicate\WSU_Taxonomies\rest_query_vars' );
add_filter( 'query_vars', 'WSUWP\Content_Syndicate\WSU_Taxonomies\query_vars' );
add_filter( 'rest_post_query', 'WSUWP\Content_Syndicate\WSU_Taxonomies\rest_post_query', 11 );

/**
 * Provide a list of taxonomies and information needed with each
 * to apply alongside WSUWP Content Syndicate.
 *
 * @since 0.0.1
 *
 * @return array
 */
function get_taxonomies() {
	$taxonomies = array(
		'university_category' => array(
			'filter' => 'wsuwp_university_category',
			'taxonomy' => 'wsuwp_university_category',
			'fallback' => 'university_category_slug',
			'match' => 'wsu_cat_match',
		),
		'university_organization' => array(
			'filter' => 'wsuwp_university_org',
			'taxonomy' => 'wsuwp_university_org',
			'fallback' => 'university_organization_slug',
			'match' => 'wsu_org_match',
		),
		'university_location' => array(
			'filter' => 'wsuwp_university_location',
			'taxonomy' => 'wsuwp_university_location',
			'fallback' => 'university_location_slug',
			'match' => 'wsu_location_match',
		),
		'category' => array(
			'filter' => 'category_name',
			'taxonomy' => 'category',
			'fallback' => 'site_category_slug',
			'match' => 'category_match',
		),
		'tag' => array(
			'filter' => 'tag',
			'taxonomy' => 'tag',
			'match' => 'tag_match',
		),
	);

	return $taxonomies;
}

/**
 * Append a list of default attributes to account for as part of this
 * taxonomy extension.
 *
 * @param array $atts WSUWP Content Syndicate shortcode attributes.
 *
 * @return array Modified list of default shortcode attributes.
 */
function append_default_attributes( $atts ) {
	$taxonomy_atts = array(
		'university_category_slug' => '', // Deprecated, fallback attribute.
		'university_category' => '',
		'university_category_match' => '',

		'university_organization_slug' => '', // Deprecated, fallback attribute.
		'university_organization' => '',
		'university_organization_match' => '',

		'university_location_slug' => '', // Deprecated, fallback attribute.
		'university_location' => '',
		'university_location_match' => '',

		'site_category_slug' => '', // Deprecated, fallback attribute.
		'category' => '',
		'category_match' => '',

		'tag' => '',
		'tag_match' => '',

		'taxonomy_match' => '',
	);

	return $atts + $taxonomy_atts;
}

/**
 * Build taxonomies on the REST API request URL generated by WSUWP Content Syndicate.
 *
 * @since 0.0.1
 *
 * @param string $request_url
 * @param array  $atts
 *
 * @return string
 */
function build_taxonomy_filters( $request_url, $atts ) {
	$taxonomies = get_taxonomies();

	foreach ( $taxonomies as $key => $taxonomy ) {
		$terms = false;

		if ( ! empty( $atts[ $key ] ) ) {
			$terms = sanitize_terms( $atts[ $key ] );
		} elseif ( isset( $taxonomy['fallback'] ) && isset( $atts[ $taxonomy['fallback'] ] ) ) {
			$terms = sanitize_terms( $atts[ $taxonomy['fallback'] ] );
		}

		if ( ! empty( $terms ) ) {
			$request_url = add_query_arg( array(
				'filter[' . $taxonomy['filter'] . ']' => $terms,
			), $request_url );
		}

		if ( ! empty( $terms ) && isset( $atts[ $taxonomy['match'] ] ) && 'all' === $atts[ $taxonomy['match'] ] ) {
			$request_url = add_query_arg( array(
				'filter[' . $taxonomy['match'] . ']' => 'all',
			), $request_url );
		}
	}

	if ( isset( $atts['taxonomy_match'] ) && 'any' === $atts['taxonomy_match'] ) {
		$request_url = add_query_arg( array(
			'filter[taxonomy_match]' => 'any',
		), $request_url );
	}

	return $request_url;
}

/**
 * Sanitize a list of term slugs so that they can be appended as query
 * variable data in a URL.
 *
 * @since 0.0.1
 *
 * @param string $terms
 *
 * @return string
 */
function sanitize_terms( $terms ) {
	$term_array = explode( ',', $terms );
	$sanitize_term_array = array_map( 'sanitize_key', $term_array );
	$imploded_terms = implode( ',', $sanitize_term_array );
	return $imploded_terms;
}

/**
 * Make the `tax_query` argument available to the REST API request.
 *
 * @since 0.0.1
 *
 * @param array $vars
 *
 * @return array
 */
function rest_query_vars( $vars ) {
	array_push( $vars, 'tax_query' );
	return $vars;
}


/**
 * Filter the query vars that the plugin expects to be available through the
 * the `filter` query argument attached to REST request URLs.
 *
 * @since 0.0.1
 *
 * @param array $vars
 *
 * @return array
 */
function query_vars( $vars ) {
	foreach ( get_taxonomies() as $taxonomy ) {
		array_push( $vars, $taxonomy['match'] );
	}

	array_push( $vars, 'taxonomy_match' );

	return $vars;
}

/**
 * Build a taxonomy query from taxonomy terms passed via filter parameters
 * in the REST API request.
 *
 * @since 0.0.1
 *
 * @param array $args
 *
 * @return array
 */
function rest_post_query( $args ) {
	$taxonomies = get_taxonomies();

	foreach ( $taxonomies as $key => $taxonomy ) {
		$taxonomies[ $key ]['query'] = array();
		if ( isset( $args[ $taxonomy['filter'] ] ) && ! empty( $args[ $taxonomy['filter'] ] ) ) {
			$terms = explode( ',', $args[ $taxonomy['filter'] ] );

			if ( 2 <= count( $terms ) && isset( $args[ $taxonomy['match'] ] ) && 'all' === $args[ $taxonomy['match'] ] ) {
				$taxonomies[ $key ]['query']['relation'] = 'AND';
			} elseif ( 2 <= count( $terms ) ) {
				$taxonomies[ $key ]['query']['relation'] = 'OR';
			}

			foreach ( $terms as $term ) {
				$taxonomies[ $key ]['query'][] = array(
					'taxonomy' => $taxonomy['taxonomy'],
					'field' => 'slug',
					'terms' => $term,
				);
			}
		}
	}

	$tax_query = array(
		'relation' => 'AND',
	);

	$queries = 0;
	foreach ( $taxonomies as $key => $taxonomy ) {
		unset( $args[ $taxonomy['filter'] ] );

		if ( empty( $taxonomy['query'] ) ) {
			continue;
		}

		$tax_query[] = $taxonomy['query'];
		$queries++;
	}

	if ( isset( $args['taxonomy_match'] ) && 'any' === $args['taxonomy_match'] ) {
		$tax_query['relation'] = 'OR';
	}

	if ( 1 >= $queries ) {
		unset( $tax_query['relation'] );
	}

	if ( ! empty( $tax_query ) ) {
		$args['tax_query'] = $tax_query;
	}

	return $args;
}
